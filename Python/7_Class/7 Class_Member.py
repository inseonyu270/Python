### 객체 지향 프로그래밍 (Object-Oriented Programming, OOP) ###
# : 복잡한 문제를 작게 나누어 객체(Object)를 만들고 이의 상호작용 & 조합을 통해 문제를 해결함.
# 프로그램의 유지보수 측면에서도 상당히 효율적
# -- why? --> 기능 새건 & 발전을 할때 해당 기능의 클래스만 수정하면 되기 때문임.



## 용어 정리 ##
# 1. 클래스(Class) : 동일한 종류의 객체를 구현하기 위한 설계도

# 2. 객체(Object) : 실제 존재하는 사물 == 존재한다 == 실체가 있다 == 메모리를 차지한다.
#                 : 추가적으로 문자, 숫자, 리스트, 딕셔너리, 함수 등 모두 객체이다.

# 3. 인스턴스(instance) : 특정 객체가 어떤 클래스의 객체인지 관계 위주로 설명할 때 사용
#                       ++) 상속 파트에서 객체와 구분지어 사용할 예정

# 4. 메서드(METHOD) : 클래스 안에서 기능으로써 정의 & 사용된 함수


## 클래스의 정의와 형식 ##
# class 클래스이름:         # 보통 클래스이름 == 대문자로 시작
#       def 메서드명(self, 매개변수):   # a메서드를 '호출한 객체'가 자동으로 전달됨 ==> self
#           self.속성 = 값

### 클래스(Class) ###
# 1. 클래스의 기본 구성
# 객체를 만들어내는 클래스는 객체가 가져야 할 값과 기능을 가지고 있어야 한다.
# 값 : 변수, 기능 : 함수
# 정리하면 클래스는 변수와 함수로 구성된다고 볼 수 있다.

# 클래스를 구성하는 변수는
# 1) 클래스를 기반으로 생성된 모든 인스턴스들이 공유하는 변수인 클래스 변수와
# 2) 모든 인스턴스들이 개별적으로 가지는 변수인 인스턴스 변수로 분리된다.

# 클래스를 구성하는 함수는 메서드 METHOD라고 하고
# 1) 클래스 메서드 2) 정적 메서드 3) 인스턴스 메서드로 분리


# 2. 인스턴스 변수와 신스턴스 메서드
# 인스턴스 변수란 클래스를 기반으로 만들어진 모든 인스턴스들이 각가 따로 저장하는 변수
# 모든 인스턴스 변수는 self라는 키워드를 앞에 붙여줌.
# 인스턴스 메서드란 인스턴스 변수를 사용하는 메서드
# 인스턴스 메서드는 반드시 첫번째 매개변수로 self를 추가해야 한다.

class Person:           # Person 클래스를 정의
    # 첫번째 매개변수가 self이므로 인스턴스 메서드
    # 모든 인스턴스는 who_am_i() 메서드를 호출할 수 있다.
    # 매개변수 self에는 머서드를 호출하는 인스턴스가 전달
    # self를 제외한 나머지 매개변수에 실제로 사용될 데이터가 전달
    def who_am_i(self, name, age, tel, address):
        # 인스턴스 변수 = 매개변수, 모든 인스턴스 변수는 최초에 값이 대입되는 시점에 알아서 생성
        self.name = name
        self.age = age
        self.tel = tel
        self.address = address

boy = Person()      # 인스턴스 boy가 생성, 클래스의 생성자가 호출
boy.who_am_i('john', 15, '010-1234-5678', 'toronto')    # 인스턴스 메서드 호출
print(boy.name)
print(boy.age)
print(boy.tel)
print(boy.address)